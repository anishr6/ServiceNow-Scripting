** There should not be semicolons after the loop statements defined.
** Semicolons are optional if the next variable declaration or operation is on a new line.
***REMEMBER THAT Script editors in ServiceNow insist for semicolons.
** do(...) while(....); takes a semicolon.
** Function statements however should not end with a semicolon.
** function (arg) { /*do this*/ } //NO semicolon here.
** While you define the for loop, the last condition for increment does not take a semicolon.
** Declare variables before using it.
** 'gs' is a built in object - hence gs.info();
** A string should open and close with the same quotes - be it single or double.


E X A M P L E
=============

var firstName = "Anish";
var secondName = 'Reghu';
var name = firstName + " " + secondName;
gs.info("Length of Name is: "+name.length);     //Use the length function to find the legth of strings.


** Use '\' character to escape checks.
** Use '\\' to print the backslash character.


E X A M P L E
=============

var myCar = 'Anish's car';    //This would throw error.
var myCar = 'Anish\'s car';   //This won't throw error because parser no more considers the single quote that follows the backslash.


**********STRING*********

** INTEGER_VALUE.toString() method converts integer to String.
** parseInt(STRING_VALUE) converts String to integer.
** Use 'type of' keyword to find the data type of any variable.


E X A M P L E
=============

var i = 5;
var iStr = i.toString();

var j = "5";
var jNum = parseInt(j/2);                         //Returns 2
var jDec = parseFloat(j/2);                       //Returns 2.5

gs.info("Value of i is: " + i);
gs.info('jNum value is: ' + jNum);                
gs.info('jDec value is: ' + jDec);                
gs.info("10 added to jNum is:" + (jNum+10));
gs.info('Data type of j is: '+ typeof j);


******* OPERATORS********

** Parantheses help execute the lower precedence operators execute first in a long chain of operations.
** Assignments are always left to right.
** Operators can be used within the gs.info() as well.

var a = 0;
var b = 1;
var c ='1';

gs.info(a > b);       //false
gs.info(a < b);       //true
gs.info(a == b);      //false
gs.info(a = b);       //1 - assigns value of 'b' to 'a' and dsiplays that value.
gs.info(b == c);      //true - because it just checks the value in these variables not the data types.
gs.info(b === c);     //false - because data types are different - one is a number, other one is a string.


********** IF STATEMENT **************
** IF statement executes the next statement after the condition if TRUE.
** For executing more statements, use curly braces.
** You need not explicitly validate the TRUE condition in a IF statement.
** Similarly using a exclamation before a variable is equal to validating that variable to FALSE.
** Use curly braces even for single statements, so that adding multiple lines later should not be much of a bother.

** AND is denoted by &&, OR is denoted by ||.

*** TERNARY OPERATOR ***

** (condition) ? <RETURN_IF_TRUE> : <RETURN_IF_FALSE>;

EXAMPLE
========
var a=5, b=6;
var status = (a > b) ? 'CORRECT' : 'INCORRECT';           
////////////CONDITION  IF_TRUE     IF_FALSE

*********Usage of Boolean String conversion in ServiceNow*************

** gs.getProperty() returns a String value (Boolean string)
** Like the String values or Integer values, we do not have inbuilt methods to change the data type here.
** So, you may have to change the string value of gs.getProperty() to Boolean manually.

EXAMPLE
=======

var isOpenString = 'false';                                   //gs.getProperty() returns true or false in a string like this.
var isOpen = (isOpenString == 'true') ? true : false;         //Convert that Boolean String into boolean this way.

***********THE SWITCH CASE***********

switch(input_field)       //input_field is the field on which different cases will be written to perform different tasks.
case<SPACE>field_value    //field_value is the dynamic value of the 'input_field' referenced above.

NOTE - input_field could be a String or Numeric.

var gs.getUserID();           //Assuming it returns the String value - Sys ID.

